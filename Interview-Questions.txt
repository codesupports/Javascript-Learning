Qus: Remove duplicate array
Qus: Get only duplicate value from Arry
Qus: remove the duplicate object
Qus: What are the design patterns in JavaScript ?
Qus: What is event loop in JavaScript ?
Qus: How to deep clone in JavaScript ? 
Qus: How to flatten an array in JavaScript ?
Qus: What is debounce in JavaScript ?
Qus: Write a code to flatten the contents of an object ?
Qus: How to create virtual dom in JavaScript ?
Qus: How do you check if an element exists in an array?
Qus: What is the difference between .map() and .forEach()?
Qus: What is the difference between .filter() and .find()?

Qus: difference between async, await and promisess in JS?
And: 	Promises: provide a powerful way to handle asynchronous operations, but can become difficult to read with complex chains.
	async/await: makes working with Promises simpler and more readable by allowing you to write asynchronous code that looks like synchronous code.


Qus:  What is prototypal inheritance in JavaScript?
Answer: Prototypal inheritance is a way of creating new objects based on an existing object. The new object inherits the properties and methods of the existing object.

Qus: What is childreen props in reactJs?
Ans: Children prop are used to pass data from the parent component to the children component.

Qus: what is hoc in react? and use case?
Qus: What is React memo?
Qus: What is Lazy Loading?
Qus: what is code splitting in react?

Qus: What is Error Boundaries in react?
Answer: Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. 
They help catch errors in child components, log the error and show fallback UI.

Qus: What is react fibre?
Ans: It is the new reconciliation engine in React 16 and is used to enable incremental rendering of virtual DOM.

Qus: Fibonach series

Qus: How to reverse string without inbuilt method?

Qus: What are the promises and why we use?
Ans: In JavaScript, Promises are a way to handle asynchronous operations (operations that take time to complete, like fetching data from a server) in a more manageable and readable way.

Qus: difference between synchronous and asynchronous in javascript?
Ans: Synchronous code moves slowly and only does one task at a time. Asynchronous code executes numerous tasks 
     simultaneously and finishes them quickly.
     Because sync is single-threaded, only one program will be executed at a time, leaving all other tasks idle while the first one is being finished
	 
Qus: Routing in reactjs?
Ans: Routing is how to navigate diffent views or pages in your single page application.

Qus: What is React Router?
Ans: React Router is a standard library for routing in React applications. It enables navigation between views or components within a React application, allowing you to manage different URL paths and map them to specific components.

Qus: What is a Temporal dead zone?
Ans: The Temporal Dead Zone (TDZ) is a behavior in JavaScript that occurs when a variable is declared using let or const but has not yet been initialized. During this period, the variable is in a "dead" state — it cannot be accessed until it is fully initialized.

Qus: Difference between cookies and local storage
Ans: Cookies and Local Storage are both mechanisms for storing data on the client-side.
	cookies: Cookies are used for small, often server-side data storage that needs to persist across requests, especially for things like authentication tokens or user preferences.
	Local Storage: Local storage data store locally and there is no expiry (storage capacity arround 5-10 MB)
	Session Storage: Session storage data store only for session and when expire after close tab or browser.

Qus: async & await in javascript
Ans: In JavaScript, async and await are used to work with asynchronous operations, making asynchronous code easier to read and write.
	async makes a function return a Promise.
	await keyword wait for a Promise to resolve 

Qus: What is code splitting in reactJs?
Ans: Code splitting is a powerful technique to optimize the performance of React applications.

Qus: what is interceptor in reactjs?

Qus: What is middleware.
Ans: Middleware in React (usually in conjunction with Redux) provides a powerful way to extend the capabilities of your application, allowing you to manage side effects, handle asynchronous actions, and maintain clean code by separating concerns. It makes the app more scalable and easier to maintain, especially as complexity increases.

Qus: In which case we use Higher order component?
Qus: How to call 2-3 api in javascript?

Qus: What is Array destructuring?
Ans: Array destructuring is a feature in JavaScript (introduced in ES6) that allows you to unpack values from arrays 

Qus: What is responsive website.
Qus: What is the purpose fo async and defer in script tag in JS.
Qus: What is progressive web app? (PWA)
Qus: What is server worker?
Qus: What is code smell?

12) write a program that dynamically create a list of card using only plain Java Script (no Framework) each card should have a heading, description and some basic style for layout like background colour margin and pedding. Explain what impact using document.createDocumentfragment instant of document.creatElement for wrapping each card would have an performance or Dom manipulation.
13) provide an example of using optional Channing in JavaScript(then ?. syntax) to safely access properties of a potential what happen when the first level of the object you are trying to access is null or undefined? How does a optional changing handle this case? also how can you handle potential error if the object you are trying to access the sent have the property at any level?
14) explain how memorization works in JavaScript and provide a sample implementation of a memorization function. what is the underlying concept of casing in memorization and how does it optimise function performance by storing result. specially how does JavaScript handle shallow copying of cached variable in a memorization function and what are the indications of this?
15) when designing a system that involves calling multiple APIs to render data on a section of a web page, how would you structure The code to handle these API calls?  what approach would you take to ensure that even if one or more API call the data from the successful once is still rendered? discuss strategies for handling partial failure and how to display available data while gracefully managing errors
16) explain the difference between the bitwise & operator and the logical && operator in JavaScript. Provide example to show how each operator behave in different scenarios specially in Boolean logic and binary operations
17) in the concept of memorization in Java Script, explain how shallow  copying works with the cashed variable. what happened when object is array are stored as part of the cache?  what potential issues can  arise from shallow copying especially when dealing with more Complex data structure?
18 ) how would you design an application where API calls need to include common header and modify the structure of the response in a centralise way? this approach should ensured that you don't need to modify even individual API call. how can you achieve thisby  abstracting the common logic for header and response transformation?

=======================HTML 5===================
What are the different kinds of Doctypes available in html?
HTML5 New features.
Difference between flex and grid?
Why we use the Label in HTML
What is the viewport in html
What is the Data attribute in HTML
What is the IE compatible mode in HTML
difference between adptive and responsive webdesign.
What is Semantic Elements and why is it importanat?
What are tags and attributes in HTML?
What are void elements in HTML?
how many ways can we specify the CSS styles for the HTML element?
What are some of the advantages of HTML5 over its previous versions?
How can we include audio or video in a webpage?
What is the purpose of HTML (HTML HyperText Markup Language is used to create Web pages and tells the browser how to display them.)
Explain the difference between HTML and HTML5
What is the new features in HTML5
Describe the block and inline element
What is the purpose of alt and title.
What is <meta charset="UTF-8"> in html?
Ans: Unicode transformation Formet 8 BIT. It is used for charactor encoding. This is the default charset of HTML5. 

The full form of HTTPS is Hypertext Transfer Protocol Secure.
Difference between "event.target" and "event.current" in Javascript?
====================CSS==============
How to make all card hight shold be same according to content with css. (can do with flex:1)
How to make card show as row wise in mobile but in desktop as a card how can we do without mediaQuery. (with grid can do)
What is CSS?
Why do we use CSS?
What are the advantages of CSS?
What is the fullform of css.
Which type of CSS holds the highest priority?
What are CSS Selectors?
What does the ‘a’ in rgba mean?
Ans: RGBA contains A (Alpha)
What is CSS Box Model?
What is the difference between CSS border and outline?
How can we format text in CSS?
what is pseudo classes in css
What is the CSS selector
What is object fit in css.
What is the Viewport height and Viewport width.
What is the difference between psedu class and sudo element.
What is the CSS Combinator
How many ways to div horizontally and vertically align center.
What is the difference between “display: none” and “visibility: hidden”, when used as attributes to the HTML element.
what is media query and how to use it
How can you use css Transition for create smooth animation.
What is keyframe in css. And have you use ever.
What is the use of !important in css.
What is Specificity?
DIfference between rem and em.
Answer: em is a CSS unit relative to the font size of the parent element, while rem is a CSS unit relative to the font size of an html element.

difference between Cellpadding and cellspacing
What are breakpoints in responsive design?
What is CSS Functions; [calc(),max(),min()]
How to write print media in css?
How to write screen media in css?
How to make SVG sprite image?
What is the siblings selector in css?
What is css media type? Check below
/*
Common Media Types:
	all: Applies to all media types. This is the default media type.
	screen: Targets devices with screens, such as computers, tablets, and smartphones.
	print: Applies styles specifically for printed documents.
	speech: Designed for screen readers or speech-based browsers.
	tv: Targets television-type devices.
*/


=========================SCSS=========================
Explain what is Sass?
What are the SCSS basic features?
Explain the @include, @mixin, @function functions and how they are used. What is %placeholder?
What is the features of Sass?
how to define a variable in Sass?
what is the difference between Sass and SCSS?
Selector Nesting in Sass is used for?
Advantage and disadvante of SCSS.

=====================Bootstrap====================
DIfference between bs4 and bs5
how many grid in BS5
Is BS5 mobile first or desktop first
What are the types of layout available in Bootstrap? (Fluid Layout, Fixed layout)

=====================Web Accebility=============
Web Content Accessibility Guidelines (WCAG) 2.1
AA and AAA standerd in Web Accessibility?

==================Javascript =====================
console.log(2+"2") // 22
console.log(2-"2") // 0
console.log("2"/"2") // 1
console.log(0.1+0.2) // 0.30000000000000004

Qus: What is hoisting?
Ans: Hoisting is the default behavior of JavaScript where variable and function declarations are moved (or "hoisted") to the top of their containing scope during the compilation phase, before the code is executed.

Qus: What is closure?
Ans: Closure is the combination of function.
	Closure in JavaScript is a concept where a function "remembers" and has access to variables from its lexical scope, even when the function is executed outside that scope.

Qus: What we need to do to avoid Hoisting In Javscript?
Qus: What is scope of variable in Js
Qus: What is this in javascript
Qus: What is the difference between Let, Var and const
Qus: What is the difference between localstorege, session storage and Cookies
Qus: How many way to clone an object.
Qus: Difference between shallow copy and deepcopy.
Qus: Differnce betwwn arrow function and normal function
Qus: what is callback
Qus: What is promises. And why we need to implemnt promisess in our code.
Qus: How many way to create and object in Js
Qus: What is datatype.
Qus: What is event delegation?
Qus: Event bubling and event capturing and how to stop both
Qus: What is curring
ES6 features Like: (Let, const, spred oprator, rest operator, Template string, desturing, Arrow function)
Qus: Differnce between map and foreach function
Qus: Differnce betwwen find and filter
Qus: How many way to declare the function in JS
Qus: Differnce betweenn slice and splice method.
Throttle: throttle we use the fastcalicking on any button >> After throttle we can stop
Qus: How to improve page speed optimization.
Qus: Static and dynamic import
Qus: How to stop api call before get response in JS.
Qus: What is the DOM api?
Qus: 

const a = [1,2,5,6,8]   Output should be: [2,3,6,7,9]
const a = [1,2,'3', "John","Richard","James"]
const a = [1,2,3,4,5] -- Square of Array
const arr = [1, 2, 3, 4, 5]; -- swaps the first two elements // [3, 4, 5, 1, 2]
console.log('Print Me');
setTimeout(() => {
console.log('Hi there...');
}, 0)
console.log('Print Me at last');

=================== Javascript and react js Interview questions==============

1) What is curring function and write sum function with curring?

const a = (x)=>{
  return b = (y)=>{
    return c = (z)=>{
      return x+y+z
    }
     }
}
console.log(a(2)(3)(4)) // output 9
..............................................................................
2) Call, apply, and bind method with example?

Bind Method:- The bind method created a new function.

let HiFun = PrintName.sayHi.bind(nameObj); 
HiFun();

call Method:- The call method takes a argument as an string. 

call(objectInstance, arg1, argN)

Apply method:- The apply method takes argumet as an Arr.

PrintName.sayHi.apply(nameObj, [42], [22]);
..............................................................................

3) Explain useEffect, useMemo, useCallback hooks.

useEffect: is used for handling side effects and executing code after rendering or when certain dependencies change.

useMemo: is used to memoize the result of a function or expression to prevent unnecessary recalculations.

useCallback: is used to memoize functions, especially useful for optimizing child components that depend on callback functions.

All three hooks take an array of dependencies. When these dependencies change, useEffect runs its effect function, useMemo recomputes the value, and useCallback recreates the memoized function.


